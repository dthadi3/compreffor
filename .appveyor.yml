environment:
  TOXENV: "py-wheels"
  TWINE_USERNAME: "anthrotype"
  TWINE_PASSWORD:
    secure: 9L/DdqoIILlN7qCh0lotvA==
  matrix:
    - PYTHON: "C:\\Python36"

    - PYTHON: "C:\\Python37"

    - PYTHON: "C:\\Python38"

    - PYTHON: "C:\\Python36-x64"

    - PYTHON: "C:\\Python37-x64"

    - PYTHON: "C:\\Python38-x64"

matrix:
  fast_finish: true

skip_branch_with_pr: true

install:
  # checkout git sub-modules
  - git submodule update --init --recursive

  # prepend newly installed Python to the PATH
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"

  # upgrade pip to avoid out-of-date warnings
  - python -m pip install --disable-pip-version-check --upgrade pip
  - pip --version

  # upgrade setuptools and virtualenv
  - pip install --upgrade setuptools virtualenv

  # install tox to run test suite in a virtual environment
  - pip install --upgrade tox

build: false

test_script:
  - "tox"

on_failure:
  # print the content of tox *.log files
  - ps: Get-Content .tox\\log\\*.log
  - ps: $envlogdir = ".tox\\" + ${env:TOXENV} + "\\log"; `
        foreach($logfile in Get-ChildItem $envlogdir){ `
            $logpath = $envlogdir + "\\" + $logfile; `
            Get-Content -path $logpath }

artifacts:
  # archive the generated packages in the ci.appveyor.com build report
  - path: .tox\dist\*.whl

# Deploy wheels on tags to PyPI
on_success:
  - ps: >-
      if($env:APPVEYOR_REPO_TAG -eq 'true') {
        Write-Output ("Deploying " + $env:APPVEYOR_REPO_TAG_NAME + " to PyPI...")
        pip install --upgrade twine
        twine upload .tox\dist\*.whl
      } else {
        Write-Output "Not deploying as this is not a tagged commit"
      }
